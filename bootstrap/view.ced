defAtom('Create.png'::image).
contextMenuEntry(List::list(T), VarNames, Path, !'Insert', cpi:edit(Path, [_|List]::list(T), VarNames), 'Create.png').
contextMenuEntry([First|Rest]::list(T), VarNames, Path, !'Append', cpi:edit(Path, [First, _|Rest]::list(T), VarNames), 'Create.png').
defAtom('Delete.png'::image).
contextMenuEntry([First|Rest]::list(T), VarNames, Path, !'Delete', cpi:edit(Path, Rest::list(T), VarNames), 'Delete.png').
signature(showView(Vis)::command, [Vis::visualization]).
commandClass(showView(Vis), !'net.nansore.cedalion.cmd.ShowView').
signature(showInView(TTerm, VarNames)::procedure, [TTerm::typedTerm, VarNames::list(varName)]).
procedure(showInView(Term::Type, VarNames), showView(vis(cpi:immediateDescriptor(Term, VarNames)::Type))).
signature(autoFix(Error, VarNames, AutoFix)::pred, [Error::error, VarNames::list(varName), AutoFix::procedure]).
autoFix(Error, VarNames, AutoFix):-builtin:fail.
signature(fixError(X, VarNames)::procedure, [X::error, VarNames::list(varName)]).
procedure(fixError(X, VarNames), doProc(if(autoFix(X, VarNames, Fix), doProc(Fix), doProc(showSolutions(X, VarNames))))).
defAtom('Error.png'::image).
markerVis(error(X, VarNames), V, tooltip(horiz([action(image('Error.png'), fixError(X, VarNames), autoFix(X, VarNames, _)), lineBorder(V, 1, cpi:rgb(255, 0, 0))]), vis(cpi:immediateDescriptor(X, VarNames)::error))).
signature(showSolutions(Error, VarNames)::procedure, [Error::error, VarNames::list(varName)]).
procedure(showSolutions(Error, VarNames), doProc(where(showView(vert(Solutions)), (builtin:findall(Proc, procedure, errorSolution(Error, VarNames, Proc), Procs), visualizeSolutions(Procs, VarNames, Solutions))))).
signature(visualizeSolutions(Procs, VarNames, Solutions)::pred, [Procs::list(procedure), VarNames::list(varName), Solutions::list(visualization)]).
visualizeSolutions([], _, []):-builtin:true.
visualizeSolutions([Proc|Procs], VarNames, [lineBorder(action(horiz([label(! (>)), vis(cpi:immediateDescriptor(Proc, VarNames)::procedure)]), Proc), 1, cpi:rgb(0, 0, 0))|Solutions]):-visualizeSolutions(Procs, VarNames, Solutions).
signature(solution(Error, VarNames, Proc)::statement, [Error::error, VarNames::list(varName), Proc::procedure]).
signature(errorSolution(Error, VarNames, Solution)::pred, [Error::error, VarNames::list(varName), Solution::procedure]).
solution(Error, VarNames, Solution)~>errorSolution(Error, VarNames, Solution):-builtin:true.
signature(insertStatement(Statement, Path, VarNames)::procedure, [Statement::statement, Path::cpi:path, VarNames::list(varName)]).
projection(insertStatement(Statement, Path, VarNames)::procedure, horiz([label(!'Insert:'), vis(Statement::statement)])).
solution(missingSignature(TTerm, TArgs, Path), VarNames, insertStatement(signature(TTerm, TArgs), Path, VarNames)).
signature(parentPath(StatementPath, ListPath)::pred, [StatementPath::cpi:path, ListPath::cpi:path]).
cpi:procedureCommand(insertStatement(Statement, Path, VarNames1), doProc(cpi:edit(ListPath, [Statement|List]::list(statement), VarNames))):-true(containingStatementPath(Path, StatementPath)), true(parentPath(StatementPath, ListPath)), true(cpi:termAtPath(ListPath, List::list(statement), VarNames2)), true(mergeVarNames(VarNames1, VarNames2, VarNames)).
parentPath(cpi:path(Res, Path), cpi:path(Res, ParentPath)):-append(ParentPath, [_], Path, number).
