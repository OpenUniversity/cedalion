signature(adapter(TTerm, WrappedTTerm)::statement, [TTerm::typedTerm, WrappedTTerm::typedTerm]).
projection(adapter(TTerm, WrappedTTerm)::statement, horiz([label(!use), vis(WrappedTTerm::typedTerm), label(!'as adapter for'), vis(TTerm::typedTerm)])).
signature(checkAdapter(X, Y)::pred, [X::typedTerm, Y::typedTerm]).
checkAdapter(TTerm, TTerm):-builtin:true.
adapter(X::T1, Y::T2)~>checkAdapter(X::T1, Y::T2):- \+T1::type=T2::type.
adapter(X::Type, (X::Type)::typedTerm).
adapter(Pred::pred, (Pred:-builtin:true)::statement).
errorSolution(typeMimatch(Given, Expected, Path), _, cpi:edit(Path, Wrapped::Expected, VarNames)):-cpi:termAtPath(Path, Original::_, VarNames), checkAdapter(Original::Given, Wrapped::Expected).
signature(setAtPathAndNotify(Path, TTerm, VarNames)::procedure, [Path::cpi:path, TTerm::typedTerm, VarNames::list(varName)]).
cpi:procedureCommand(setAtPathAndNotify(Path, TTerm, VarNames), doAll([doProc(cpi:setAtPath(Path, TTerm, VarNames)), notify(StatementPath::cpi:path)])):-containingStatementPath(Path, StatementPath).
autoFix(typeMimatch(Given, Expected, Path), _, setAtPathAndNotify(Path, Wrapped::Expected, VarNames)):-cpi:termAtPath(Path, Original::_, VarNames), checkAdapter(Original::Given, Wrapped::Expected).
