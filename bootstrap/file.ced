doc(!'Load a file named FileName into memory.  ResourceName is to be used for the paths, and Namespace is the default namespace to be used', signature(cpi:openFile(FileName, ResourceName, Namespace)::procedure, [FileName::string, ResourceName::string, Namespace::string])).
signature(loadedFile(ResourceName, FileName, Model)::statement, [ResourceName::string, FileName::string, Model::model]).
signature(undoFrame::type, []).
signature(editState(ResourceName, UndoStack, RedoStack, DirtyFlag)::statement, [ResourceName::string, UndoStack::list(undoFrame), RedoStack::list(undoFrame), DirtyFlag::number]).
procedure(cpi:openFile(FileName, ResourceName, Namespace), doAll([readFile(FileName, Namespace, FileContent), assignFinal(Model, fileToModel(FileContent), model), dbInsert(loadedFile(ResourceName, FileName, Model)), dbInsert(editState(ResourceName, [], [], 0))])).
doc(!'Close a file: remove its contents from memory', signature(cpi:closeFile(ResourceName)::procedure, [ResourceName::string])).
procedure(cpi:closeFile(ResourceName), doAll([dbRemove(loadedFile(ResourceName, _, _)), dbRemove(editState(ResourceName, _, _, _))])).
signature(fileIsLoaded(ResourceName, FileName, Model)::pred, [ResourceName::string, FileName::string, Model::model]).
loadedFile(ResourceName, FileName, Model)~>fileIsLoaded(ResourceName, FileName, Model):-builtin:true.
signature(editStateIs(ResourceName, UndoStack, RedoStack, ModifiedCounter)::pred, [ResourceName::string, UndoStack::list(undoFrame), RedoStack::list(undoFrame), ModifiedCounter::number]).
editState(ResourceName, UndoStack, RedoStack, ModifiedCounter)~>editStateIs(ResourceName, UndoStack, RedoStack, ModifiedCounter):-builtin:true.
signature(model::type, []).
signature(fileToModel(Content)::expr(model), [Content::fileContent]).
signature(nsElem::type, []).
signature(annotatedTerm::type, []).
doc(!'A data structure to hold a list of statements with variable name bindings, and a list of namespace aliases', signature(builtin:fileContent(Terms, NsList)::fileContent, [Terms::list(annotatedTerm), NsList::list(nsElem)])).
signature(model(Statements, VarNames, NsList)::model, [Statements::list(statement), VarNames::list(varName), NsList::list(nsElem)]).
doc(!'A simple procedural expression that returns the Constant it is given', signature(cpi:constExpr(Const)::expr(T), [Const::T])).
projection(cpi:constExpr(Const)::expr(T), horiz([halfSize(label(!const)), vis(Const::T)])).
cpi:procedureCommand(cpi:func(fileToModel(builtin:fileContent(Terms, NsList)), ModelRef, model), assign(ModelRef, cpi:constExpr(model(Statements, VarNames, NsList)), model)):-fileModel(Terms, Statements, VarNames).
signature(fileModel(Terms, Statements, VarNames)::pred, [Terms::list(annotatedTerm), Statements::list(statement), VarNames::list(varName)]).
fileModel([], [], []):-builtin:true.
doc(!'A data structure to hold a pair of a statement along with its variable name bindings', signature(builtin:statement(S, VN)::annotatedTerm, [S::statement, VN::list(varName)])).
signature(mergeVarNames(VN1, VN2, VarNames)::pred, [VN1::list(varName), VN2::list(varName), VarNames::list(varName)]).
fileModel([builtin:statement(S, VN1)|Terms], [S|Statements], VarNames):-fileModel(Terms, Statements, VN2), mergeVarNames(VN1, VN2, VarNames).
mergeVarNames([], VarNames, VarNames):-builtin:true.
signature(listMember(Elem, Type, List)::pred, [Elem::Type, Type::type, List::list(Type)]).
doc(!'A data structure to hold a single typed variable (TVar) along with its Name', signature(builtin:varName(TVar, Name)::varName, [TVar::typedTerm, Name::string])).
mergeVarNames([builtin:varName(Var::T, Name)|VN1], VN2, VarNames):-builtin:if(listMember(builtin:varName(Var::T, Name), varName, VN2), mergeVarNames(VN1, VN2, VarNames), mergeVarNames(VN1, [builtin:varName(Var::T, Name)|VN2], VarNames)).
signature(varInVarNames(TVar, VN)::pred, [TVar::typedTerm, VN::list(varName)]).
doc(!'Checks if two typed terms are equal.  Variables are equal if they are already bound to each other', signature(builtin:equals(TVar1, TVar2)::pred, [TVar1::typedTerm, TVar2::typedTerm])).
projection(builtin:equals(TVar1, TVar2)::pred, horiz([vis(TVar1::typedTerm), label(! (==)), vis(TVar2::typedTerm)])).
alias(builtin:equals(TVar1, TVar2)::pred, ! (==)).
varInVarNames(Var::T, [builtin:varName(Var1::T, _)|_]):-builtin:equals(Var1::T, Var::T).
varInVarNames(Var::T, [_|VN]):-varInVarNames(Var::T, VN).
doc(!'Save a file to the disk.  Given are both the ResourceName by which it is represented in memory, and the FileName to be used on the disk', signature(cpi:saveFile(ResourceName, FileName)::procedure, [ResourceName::string, FileName::string])).
signature(modelToContent(Model, Content)::pred, [Model::model, Content::fileContent]).
cpi:procedureCommand(cpi:saveFile(ResourceName, FileName), doAll([writeFile(FileName, Content), dbRemove(editState(ResourceName, _, _, _)), dbInsert(editState(ResourceName, UndoStack, RedoStack, 0))])):-fileIsLoaded(ResourceName, _, Model), modelToContent(Model, Content), editStateIs(ResourceName, UndoStack, RedoStack, _).
signature(annotateStatements(Statements, VarNames, AnnoStatements)::pred, [Statements::list(statement), VarNames::list(varName), AnnoStatements::list(annotatedTerm)]).
modelToContent(model(Statements, VarNames, NsList), builtin:fileContent(AnnoStatements, NsList)):-annotateStatements(Statements, VarNames, AnnoStatements).
annotateStatements([], _, []):-builtin:true.
signature(selectVarNamesFor(TTerm, VN1, VN2)::pred, [TTerm::typedTerm, VN1::list(varName), VN2::list(varName)]).
annotateStatements([Statement|Statements], VarNames, [builtin:statement(Statement, VN1)|AnnoStatements]):-selectVarNamesFor(Statement::statement, VarNames, VN1), annotateStatements(Statements, VarNames, AnnoStatements).
selectVarNamesFor(_, [], []):-builtin:true.
signature(varIn(TVar, TTerm)::pred, [TVar::typedTerm, TTerm::typedTerm]).
selectVarNamesFor(TTerm, [builtin:varName(Var::T, Name)|VarNames], VN):-selectVarNamesFor(TTerm, VarNames, VN1), builtin:if(varIn(Var::T, TTerm), VN::list(varName)=[builtin:varName(Var::T, Name)|VN1]::list(varName), VN::list(varName)=VN1::list(varName)).
varIn(Var::VarType, Term::TermType):-builtin:if(builtin:var(Term::TermType), builtin:equals(Var::VarType, Term::TermType), (builtin:compound(Term::TermType), builtin:parseTerm(Term::TermType, _, Args), varInList(Var::VarType, Args))).
varInList(Var::VarType, [First::FirstType|_]):-varIn(Var::VarType, First::FirstType).
varInList(Var::VarType, [_|Tail]):-varInList(Var::VarType, Tail).
doc(!'An import statement.  Binds a namespace name to an alias (deprecated)', signature(builtin:import(Alias, NS)::statement, [Alias::string, NS::string])).
projection(builtin:import(Alias, NS)::statement, horiz([label(!import), vis(NS::string), label(! (as)), vis(Alias::string)])).
cpi:rootType(list(statement)).
