defAtom(statements::set(statement)).
setDef(statements,set(Statement,builtin:loadedStatement(_,Statement,_)),statement).
signature(closure(S)::set(statement),[S::statement]).
setDef(closure(S),union(singleton(S),set(Y, (member((S~>X),statements,statement),member(Y,closure(X),statement)))),statement).
defAtom(closure::set(statement)).
setDef(closure,set(Y, (member(X,statements,statement),member(Y,closure(X),statement))),statement).
defAtom(myStatementSet::set(statement)).
disabled(unitTest(member((member(X,myStatementSet,statement):-member(X,singleton(setDef(_,_,_)),statement)),closure(setDef(myStatementSet,singleton(setDef(_,_,_)),statement)),statement))).
disabled(unitTest(member(setDef(myStatementSet,singleton(setDef(_,_,_)),statement),closure(setDef(myStatementSet,singleton(setDef(_,_,_)),statement)),statement))).
disabled(unitTest(\+member((member(X,myStatementSet,statement):-member(X,singleton((_:-_)),statement)),closure(setDef(myStatementSet,singleton(setDef(_,_,_)),statement)),statement))).
