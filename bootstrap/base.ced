signature(annotation:parentheses(signature(TTerm, TArgs))::statement, [TTerm::typedTerm, TArgs::list(typedTerm)]).
annotation:comment(signature(annotation:parentheses(Term::Type)::typedTerm, [Term::Type, Type::type]), !'A typed term pair.  This is a way to pass terms regardless of their type.  Having the type encapsulated along with the term allows Cedalion to maintain type safety.').
alias((Term::Type)::typedTerm, ! (::)).
annotation:comment(signature((Head:-Body)::statement, [Head::pred, Body::pred]), !'A prolog-like deduction rule.  Means that Head holds for every assignment for which Body holds').
annotation:comment(signature((A, B)::pred, [A::pred, B::pred]), !'Conjunction.  Means that A and B must hold.  A is evaluated first, and for each successful assignment of the variables in A, B is tested.  Basic logic programming...').
annotation:comment(signature((Head~>Body)::statement, [Head::statement, Body::statement]), !'Rewrite rule.  It provides statements based on Body for every statement that matches Head.').
annotation:comment(signature([]::list(_), []), !'Empty list (or the end of a list)').
annotation:comment(signature([X|L]::list(T), [X::T, L::list(T)]), !'A list with at-least one element, or a link in a list').
annotation:comment(defAtom(type::type), !'The type of all types...  Types are first-class citizens in Cedalion').
annotation:comment(defAtom(string::type), !'The type of strings').
annotation:comment(signature(pred::type, []), !'The type of predicates.  Predicates are first-class citizens in Cedalion, and therefore they are typed').
annotation:comment(signature(list(T)::type, [T::type]), !'The types of lists.  T represents the type of each element on the list (note that all elements must be of the same type).').
annotation:comment(signature(horiz::mode, []), !'This mode orders Cedalion to present  a list as a horizontal list, bound by []').
projection(horiz(List)::visualization, horiz([halfSize(label(!h)), cpi:vis(List::list(visualization), horizontal(label(!' '), label(![])))], cpi:top)).
signature(horiz(List, Alignment)::visualization, [List::list(visualization), Alignment::alignment]).
projection(horiz(List, Alignment)::visualization, horiz([halfSize(label(!h)), horiz([vis(Alignment::alignment), cpi:vis(List::list(visualization), horizontal(32, 32, label(!' '), label(![])))])], cpi:top)).
annotation:shrink(projection(annotation:parentheses(projection(TTerm, Vis))::statement, horiz([label(!display), vis(TTerm::typedTerm), label(! (as)), vis(Vis::visualization)]))).
defAtom(horizCont::mode).
projection([]::list(_), horizCont, horiz([])).
projection([F|R]::list(T), horizCont, horiz([label(! (,)), vis(F::T), cpi:vis(R::list(T), horizCont)])).
projection((H~>B)::statement, horiz([vis(H::statement), symbol(8669), vis(B::statement)])).
alias((H~>B)::statement, ! (~>)).
projection((Term::Type)::typedTerm, horiz([vis(Term::Type), label(! (::)), vis(Type::type)])).
projection((A, B)::pred, vert([horiz([vis(A::pred), label(! (,))]), vis(B::pred)])).
alias((A, B)::pred, ! (,)).
projection((H:-B)::statement, horiz([vis(H::pred), label(! (:-)), vis(B::pred)])).
projection(annotation:parentheses(signature(TTerm, TArgs))::statement, horiz([label(!declare), vis(TTerm::typedTerm), label(!where), cpi:vis(TArgs::list(typedTerm), horizontal(label(! (,)), label(!'()')))])).
signature(or(A, B)::pred, [A::pred, B::pred]).
projection(or(A, B)::pred, horiz([vis(A::pred), symbol(8744), vis(B::pred)])).
or(A, B):-A.
or(A, B):-B.
