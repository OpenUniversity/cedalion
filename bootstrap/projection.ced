checkSignature(cpi:descriptor(Path, Term, Markers)::Type, [Path::cpi:path, Term::Type, Markers::list(locMarker)]):-builtin:true.
cpi:visualizeDescriptor(cpi:descriptor(Path, Term, Markers)::Type1, ProjType, MVis):-fixType(Type1::type, Type::type), cpi:termAtPath(Path, Term::Type, VarNames), true(applyCheckers(cpi:descriptor(Path, Term, Markers)::Type, Term::Type, VarNames, Desc)), builtin:if(builtin:var(Term::Type), visualizeVar(Term::Type, VarNames, Vis), builtin:if(builtin:number(Term::Type), visualizeNumber(Term::Type, Vis), builtin:if(builtin:string(Term::Type), visualizeString(Term::Type, Vis), visualizeCompound(Desc, Term::Type, ProjType, Vis)))), true(applyMarkers(Desc, Vis, MVis)).
visualizeVar(_, [builtin:varName(_, Name)|_], italic(color(label(Name), cpi:rgb(0, 128, 0)))):-builtin:true.
visualizeVar(_, [], italic(color(label(!'_'), cpi:rgb(0, 128, 0)))):-builtin:true.
visualizeNumber(Num::_, label(Num)):-builtin:true.
visualizeString(Str::_, label(Str)):-builtin:true.
visualizeCompound(Desc, Term::Type, ProjType, Vis):-true(builtin:parseTerm(Term::Type, Func, TArgs)), true(subDescriptors(Desc, 0, TArgs, SubDescs)), true(builtin:parseTerm(Term2Vis::Type, Func, SubDescs)), true(visualizeTerm(Term2Vis::Type, ProjType, Vis)).
signature(builtin:findall(Element, Type, Goal, List)::pred, [Element::Type, Type::type, Goal::pred, List::list(Type)]).
projection(builtin:findall(Element, Type, Goal, List)::pred, horiz([label(!'Find all'), vis(Element::Type), label(!'of type'), vis(Type::type), label(!'such that'), vis(Goal::pred), label(!into), vis(List::list(Type))])).
applyCheckers(cpi:descriptor(Path, Term, OldMarkers)::Type, TTerm, VarNames, cpi:descriptor(Path, Term, Markers)::Type):-builtin:findall(Marker, locMarker, check(Path, TTerm, VarNames, Marker), NewMarkers), append(OldMarkers, NewMarkers, Markers, locMarker).
subDescriptors(_, _, [], []):-builtin:true.
subDescriptors(cpi:descriptor(cpi:path(Res, Path), Term, Markers)::Type, BeforeIndex, [_Arg::ArgType|TArgs], [cpi:descriptor(cpi:path(Res, NewPath), _DummyArg, MarkersForPath)::ArgType|SubDescs]):-builtin:succ(BeforeIndex, Index), append(Path, [Index], NewPath, _), markersForPath(Markers, cpi:path(Res, NewPath), MarkersForPath, MarkersLeft), subDescriptors(cpi:descriptor(cpi:path(Res, Path), Term, MarkersLeft)::Type, Index, TArgs, SubDescs).
pathIsPrefix(cpi:path(Res, []), cpi:path(Res, _)):-builtin:true.
pathIsPrefix(cpi:path(Res, [First|Base]), cpi:path(Res, [First|Path])):-pathIsPrefix(cpi:path(Res, Base), cpi:path(Res, Path)).
signature(visualizeTerm(TTerm2Vis, ProjType, Vis)::pred, [TTerm2Vis::typedTerm, ProjType::mode, Vis::visualization]).
visualizeTerm(TTerm2Vis, ProjType, Vis):-builtin:if(userVisualization(TTerm2Vis, ProjType, [], Vis), builtin:true, defaultVisualization(TTerm2Vis, Vis)).
defaultVisualization(TTerm, Vis):-builtin:parseTerm(TTerm, Func, SubPaths), builtin:if(localName(Func, LFunc), builtin:true, LFunc::string=Func::string), builtin:if(SubPaths::list(cpi:path)=[]::list(cpi:path), Vis::visualization=label(LFunc)::visualization, (argListForPathList(SubPaths, ArgList), Vis::visualization=horiz([label(LFunc), label(!'('), horiz(ArgList), label(!')')])::visualization)).
argListForPathList([Path], [vis(Path)]):-builtin:true.
argListForPathList([First|Rest], [vis(First), label(! (,))|ArgList]):-argListForPathList(Rest, ArgList).
localName(Func, LFunc):-builtin:charCodes(Func, Codes), append(PrefCodes, [35|LocalCodes], Codes, _), builtin:charCodes(LFunc, LocalCodes).
append([], B, B, T):-builtin:true.
append([X|A], B, [X|L], T):-append(A, B, L, T).
signature(projection(TTerm, ProjType, Vis)::statement, [TTerm::typedTerm, ProjType::mode, Vis::visualization]).
projection(projection(TTerm, ProjType, Vis)::statement, horiz([vis(TTerm::typedTerm), label(!'@'), vis(ProjType::mode), symbol(8608), vis(Vis::visualization)])).
defines(projection(TTerm, ProjType, Vis), TTerm, projectionDefinition).
signature(cpi:default::mode, []).
projection(TTerm, Vis)~>userVisualization(TTerm, cpi:default, _, Vis):-builtin:true.
projection(TTerm, ProjType, Vis)~>userVisualization(TTerm, ProjType, _, Vis):-builtin:true.
signature(userVisualization(TTerm, ProjType, Hist, VisNew)::pred, [TTerm::typedTerm, ProjType::mode, Hist::list(mode), VisNew::visualization]).
asProjection(VisOrig, ProjOrig, VisNew, ProjNew)~>userVisualization(TTerm, ProjNew, Hist, VisNew):- \+listMember(ProjOrig, projectionType, Hist), userVisualization(TTerm, ProjOrig, [ProjOrig|Hist], VisOrig).
checkSignature(cpi:immediateDescriptor(Term, VarNames)::Type, [Term::Type, VarNames::list(varName)]):-builtin:true.
cpi:visualizeDescriptor(cpi:immediateDescriptor(Term, VarNames)::Type1, ProjType, Vis):-fixType(Type1::type, Type::type), builtin:if(builtin:var(Term::Type), true(visualizeVar(Term::Type, VarNames, Vis)), builtin:if(builtin:number(Term::Type), true(visualizeNumber(Term::Type, Vis)), builtin:if(builtin:string(Term::Type), true(visualizeString(Term::Type, Vis)), true(visualizeCompound(cpi:immediateDescriptor(Term, VarNames)::Type, Term::Type, ProjType, Vis))))).
subDescriptors(cpi:immediateDescriptor(Term, VarNames)::Type, BeforeFirst, [SubTerm::SubType|TArgs], [cpi:immediateDescriptor(SubTerm, VarNames1)::SubType|SubDescs]):-true(builtin:succ(BeforeFirst, First)), true(selectVarNamesFor(SubTerm::SubType, VarNames, VarNames1)), true(subDescriptors(cpi:immediateDescriptor(Term, VarNames)::Type, First, TArgs, SubDescs)).
isDescriptor(cpi:immediateDescriptor(_, _)::_).
isDescriptor(cpi:descriptor(_, _, _)::_).
descriptorContent(cpi:immediateDescriptor(Term, VarNames)::Type, Term::Type, VarNames).
descriptorContent(cpi:descriptor(Path, _, Markers)::Type, Term::Type, VarNames):-cpi:termAtPath(Path, Term::Type, VarNames).
signature(fixType(TTerm1, TTerm2)::pred, [TTerm1::typedTerm, TTerm2::typedTerm]).
fixType(TTerm1, TTerm2):-builtin:if(isDescriptor(TTerm1), descriptorContent(TTerm1, TTerm2, _), (builtin:parseTerm(TTerm1, Func, Args), fixTypes(Args, FixedArgs), builtin:parseTerm(TTerm2, Func, FixedArgs))).
fixTypes([], []):-builtin:true.
fixTypes([TTerm1|Args], [TTerm2|FixedArgs]):-fixType(TTerm1, TTerm2), fixTypes(Args, FixedArgs).
