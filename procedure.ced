% Procedures
signature(procedureCommand(Proc, Command) :: proc, [Proc::procedure, Command::command]).

signature(procedure(Proc, Command)::statement, [Proc::procedure, Command::command]).
procedure(Proc, Command) ~> procedureCommand(Proc, Command) :- true.

signature(function(Expr, Command, Result, T) :: statement, [Proc::procedure, Command::command, Result::ref(T), T::type]).
signature(func(Proc, Result, T) :: procedure, [Proc::procedure, Result::ref(T), T::type]).
function(Expr, Command, Result, T) ~> procedure(func(Proc, Result, T), Command).

signature(termClass(TTerm, ClassName)::pred, [TTerm::typedTerm, ClassName::string]).
signature(class(TTerm, ClassName)::statement, [TTerm::typedTerm, ClassName::string]).
commandClass(Cmd, ClassName) ~> termClass(Cmd::command, ClassName) :- true.


signature(doAll(List)::command, [List::list(command)]).
commandClass(doAll(_), s('net.nansore.cedalion.cmd.DoAll')).

signature(assign(Ref, Expr, Type)::command, [Ref::ref(Type), Expr::expr(Type), Type::type]).
commandClass(assign(_, _, _), s('net.nansore.cedalion.cmd.Assign')).

signature(doProc(Proc)::command, [Proc::procedure]).
commandClass(doProc(_), s('net.nansore.cedalion.cmd.DoProc')).

signature(readFile(FileName, Namespace, FileContent)::command, [FileName::string, Namespace::string, FileContent::fileContent]).
commandClass(readFile(FileName, Namespace, FileContent), s('net.nansore.cedalion.cmd.ReadFile')).

signature(assignFinal(Var, Expr, T)::command, [Var::T, Expr::expr(T), T::type]).
commandClass(assignFinal(Var, Expr, T), s('net.nansore.cedalion.cmd.AssignFinal')).

signature(dbInsert(Statement)::command, [Statement::statement]).
commandClass(dbInsert(Statement), s('net.nansore.cedalion.cmd.DBInsert')).

procedure(openFile(FileName, ResourceName, Namespace), 
	doAll([
		readFile(FileName, Namespace, FileContent),
		assignFinal(Model, fileToModel(FileContent), model),
		dbInsert(loadedFile(ResourceName, Model))
	])).

procedureCommand(func(fileToModel(fileContent(Terms, _)), ModelRef, model), assign(ModelRef, constExpr(model(Statements, VarNames)), model)) :-
	fileModel(Terms, Statements, VarNames).

signature(fileModel(Terms, Statements, VarNames)::pred, [Terms::list(annotatedTerm), Statements::list(statement), VarNames::list(varName)]).
fileModel([], [], []) :- true.
fileModel([statement(S, VN1) | Terms], [S | Statements], VarNames) :-
	fileModel(Terms, Statements, VN2),
	mergeVarNames(VN1, VN2, VarNames).


mergeVarNames([], VarNames, VarNames) :- true.
mergeVarNames([varName(Var::T, Name) | VN1], VN2, VarNames) :-
	if(varInVarNames(Var, VN2),
		mergeVarNames(VN1, VN2, VarNames),
		%else
		mergeVarNames(VN1, [varName(Var::T, Name) | VN2], VarNames)).

varInVarNames(Var, [varName(Var1::T, _) | _]) :-
	equals(Var1, Var, T).
varInVarNames(Var, [_ | VN]) :-
	varInVarNames(Var, VN).

