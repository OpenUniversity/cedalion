'/bootstrap':signature(microArraySection::'/bootstrap':type, []).
'/bootstrap':signature(microArray(Name, Sections)::'/bootstrap':statement, [Name::'/bootstrap':string, Sections::'/bootstrap':list(microArraySection)]).
'/bootstrap':projection(microArray(Name, Sections)::'/bootstrap':statement, '/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!'Micro-array'), '/bootstrap':vis(Name::'/bootstrap':string)]), '/bootstrap':horiz(['/bootstrap':label(!'    '), '/bootstrap':vis(Sections::'/bootstrap':list(microArraySection))])])).
'/bootstrap':signature(section(Name, Set, Quantity)::microArraySection, [Name::'/bootstrap':string, Set::'/bootstrap':set('/bootstrap':list(base)), Quantity::'/bootstrap':number]).
'/bootstrap':projection(section(Name, Set, Quantity)::microArraySection, '/bootstrap':horiz(['/bootstrap':vis(Name::'/bootstrap':string), '/bootstrap':label(! (:)), '/bootstrap':vis(Set::'/bootstrap':set('/bootstrap':list(base))), '/bootstrap':label(!'('), '/bootstrap':vis(Quantity::'/bootstrap':number), '/bootstrap':label(!')')])).
'/bootstrap':adapter(Set::'/bootstrap':set('/bootstrap':list(base)), section(!'name...', Set, 1)::microArraySection).
'/bootstrap':signature(generateMicroArray(Name, Sections)::'/bootstrap':procedure, [Name::'/bootstrap':string, Sections::'/bootstrap':list(microArraySection)]).
cpi:procedureCommand(generateMicroArray(Name, Sections), '/bootstrap':doAll(Commands)):-sectionsToCommands(Sections, Commands, Name).
'/bootstrap':signature(sectionsToCommands(Sections, Commands, Name)::'/bootstrap':pred, [Sections::'/bootstrap':list(microArraySection), Commands::'/bootstrap':list('/bootstrap':command), Name::'/bootstrap':string]).
'/bootstrap':projection(sectionsToCommands(Sections, Commands, Name)::'/bootstrap':pred, '/bootstrap':horiz(['/bootstrap':vis(Sections::'/bootstrap':list(microArraySection)), '/bootstrap':label(!'issue commands'), '/bootstrap':vis(Commands::'/bootstrap':list('/bootstrap':command)), '/bootstrap':label(!'for microarray'), '/bootstrap':vis(Name::'/bootstrap':string)])).
sectionsToCommands([], [], _):-builtin:true.
sectionsToCommands([section(Name, Set, Quantity)|Sections], ['/bootstrap':doProc('/bootstrap':generateFileForSet(FileName, '/Functional':eset(sequenceString(Seq), '/bootstrap':member(Seq, Set, '/bootstrap':list(base)))))|Commands], MAName):-'/Functional':eval('/Functional':concat('/Functional':concat('/Functional':wrap(MAName), '/Functional':wrap(!.)), '/Functional':concat('/Functional':wrap(Name), '/Functional':concat('/Functional':wrap(!.), '/Functional':concat('/Functional':'num2str'('/Functional':wrap(Quantity)), '/Functional':wrap(!'.all.seq'))))), '/bootstrap':string, FileName), sectionsToCommands(Sections, Commands, MAName).
'/bootstrap':contextMenuEntry(microArray(Name, Sections)::'/bootstrap':statement, _, _, !'Generate Micro-Array', generateMicroArray(Name, Sections)).
microArray(!'microarray/test1', [section(!'negative-control', seq(rep(nSet, 4), seq('/bootstrap':union(tSet, '/bootstrap':union(gSet, cSet)), rep(nSet, 4))), 200), section(!test, seq(rep(nSet, 4), seq(aSet, rep(nSet, 4))), 30000)]).
