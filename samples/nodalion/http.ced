'/bootstrap':defAtom(require::'/javascript':symbol).
'/bootstrap':defAtom(request::'/javascript':symbol).
'/bootstrap':defAtom(response::'/javascript':symbol).
'/bootstrap':defAtom(handler::'/bootstrap':type).
'/bootstrap':signature(createServer(Handler,Port)::'/javascript/jsLogic':procedure,[Handler::handler,Port::'/Functional':expr('/bootstrap':number)]).
'/bootstrap':defAtom(requestObj::'/bootstrap':type).
'/bootstrap':defAtom(responseObj::'/bootstrap':type).
'/bootstrap':signature(handleRequest(Handler,Req,Res)::'/javascript/jsLogic':procedure,[Handler::handler,Req::requestObj,Res::responseObj]).
'/javascript/jsLogic':procedure(createServer(Handler,Port),'/javascript/jsLogic':jsCommand(['/javascript':var(Server,'/javascript':call('/javascript':dot('/javascript':call('/javascript':varExpr(require),['/javascript':str(!http)]),!createServer),[annotation:shrink('/javascript':function([request,response],['/javascript/jsLogic':runProcedure(handleRequest(Handler,'/javascript/jsLogic':jsExpr('/javascript':varExpr(request)),'/javascript/jsLogic':jsExpr('/javascript':varExpr(response))))]))])),'/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach('/Functional':eval(Port,'/bootstrap':number,PortNum),'/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr(Server),!listen),['/javascript/jsLogic':inlineTerm(PortNum::'/bootstrap':number)]))])))])).
'/bootstrap':signature(handler(Name,Req,Res,Cmd)::'/bootstrap':statement,[Name::handler,Req::requestObj,Res::responseObj,Cmd::'/javascript/jsLogic':jsCommand]).
'/bootstrap':projection(handler(Name,Req,Res,Cmd)::'/bootstrap':statement,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!handler),'/bootstrap':vis(Name::handler),'/bootstrap':vis(Req::requestObj),'/bootstrap':symbol(8658),'/bootstrap':vis(Res::responseObj)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Cmd::'/javascript/jsLogic':jsCommand)])])).
'/bootstrap':defAtom(helloWorld::handler).
handler(helloWorld,Req,Res,'/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript/jsLogic':inlineTerm(Res::responseObj),!writeHead),['/javascript':const(200),'/javascript':str(!'OK'),'/javascript':json(['/javascript':bind('/javascript':str(!'content-type'),'/javascript':str(!'text/html'))])])),'/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach(('/website':pageContent('/website':index,!'cedalion.org',!'cedalion-website.css',!'cedalion-logo.png',['/website':index,'/website':documentation,'/website':download],HTML),'/Functional':eval('/html':toText(HTML::'/html':xml),'/bootstrap':string,Text)),'/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript/jsLogic':inlineTerm(Res::responseObj),!write),['/javascript/jsLogic':inlineTerm(Text::'/bootstrap':string)]))]))),'/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript/jsLogic':inlineTerm(Res::responseObj),!end),[]))])).
handler(Handler,Req,Res,Cmd)~>'/javascript/jsLogic':procedure(handleRequest(Handler,Req,Res),Cmd).
'/bootstrap':defAtom(helloApp::'/javascript/jsLogic':procedure).
'/javascript/jsLogic':procedure(helloApp,'/javascript/jsLogic':jsCommand(['/javascript':var(File,'/javascript':call('/javascript':dot('/javascript':call('/javascript':varExpr(require),['/javascript':str(!fs)]),!createReadStream),['/javascript':str(!'cedalion.js')])),'/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr(File),!on),['/javascript':str(!data),annotation:shrink('/javascript':function([Data],['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript':varExpr(Data)]))]))])),'/javascript/jsLogic':runProcedure(createServer(helloWorld,'/Functional':const(8080))),'/javascript/jsLogic':runProcedure(log('/Functional':const(!'Done')))])).
'/bootstrap':signature(log(Str)::'/javascript/jsLogic':procedure,[Str::'/Functional':expr('/bootstrap':string)]).
'/javascript/jsLogic':procedure(log(Str),'/javascript/jsLogic':jsCommand(['/javascript/jsLogic':runProcedure('/javascript/jsLogic':foreach('/Functional':eval('/Functional':concat('/Functional':concat('/Functional':const(!'['),Str),'/Functional':const(!']')),'/bootstrap':string,S),'/javascript/jsLogic':jsCommand(['/javascript':exprStatement('/javascript':call('/javascript':dot('/javascript':varExpr('/javascript/jsLogic':console),!log),['/javascript/jsLogic':inlineTerm(S::'/bootstrap':string)]))])))])).
