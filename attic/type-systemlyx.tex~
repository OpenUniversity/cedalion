%% LyX 1.5.6 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[english]{article}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\usepackage{listings}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\newcommand{\noun}[1]{\textsc{#1}}

\makeatother

\usepackage{babel}

\begin{document}

\title{A Type-System for DSLs in Logic Programming}

\maketitle
\begin{abstract}
Logic programming has a variety of applications. It is most useful
for expressing things not easily expressed with traditional, imperative
languages. One reason for the power of logic programming lies in the
fact that Domain Specific Languages (DSLs) can be defined easily and
elegantly from within the language, so that programming can take any
shape desired by its designer.

Most existing logic-programming languages (such as most Prolog variants)
are dynamically typed. Other languages that are statically typed (such
as Mercury) are typed in a way that does not support such DSLs. Static
typing is desired since it can help the creator of a DSL lay out the
rules for that DSL.

We introduce a type-system for a logic-programming language based
on Prolog that will support and facilitate the definitions of DSLs.
\end{abstract}

\section{Introduction}

Logic programming has been known to be a powerful paradigm for solving
difficult problems, ones not easily solved with main-stream imperative
languages. Throughout the years it has been used for different aspects
of artificial inteligence, natural language processing, expret systems
and more. All these tasks require the language to be highly expressive
in terms of the problem domain. The combination of simplicity and
power of the computational model behind logic programming facilitated
that expressiveness. Logic programming starts with first-order logic,
but it can move anywhere.

Let's consider the following Prolog code example:

\label{Listing 1}
\begingroup
\inputencoding{latin1}
\begin{lstlisting}[numbers=left]
:- op(700, xfx, '::=').
% parse(Pattern, Text, Residue)
%   Succeeds if a prefix of Text matches Pattern, leaving Residue
parse(empty, Text, Text).
parse(First, [First | Rest], Rest).
parse((A, B), Text, Residue) :-
    parse(A, Text, AfterA),
    parse(B, AfterA, Residue).
parse(NonTerminal, Text, Residue) :-
    NonTerminal ::= Pattern,
    pasrse(Pattern, Text, Residue).
\end{lstlisting}
\endgroup
This is a definition of a predicate - \emph{parse/3}, which parses
a string using a given pattern. The pattern may contain terminals
(elements that are expected in the string e.g. characters), and non-terminal
symbols. The pattern may contain uses of the comma operator for concatenation.
Non-terminals are interpreted by using the \emph{::=/2} predicate,
not defined here. This predicate converts a non-terminal symbol to
a pattern. After converting it to a pattern, the \emph{parse/3} predicate
calls itself recursively to parse the underlying pattern.

While the \emph{::=/2} predicate was not defined by this code, its
meaning was. It was defined by usage. The definition of the\emph{
::=/2} predicate becomes the grammar accepted by the \emph{parse/3}
predicate. The behavior of \emph{parse/3} is determined by the definition
of \emph{::=/2}, which in this case is left to the user. Users can
now define their own grammar using a BNF-like language, all by defining
the \emph{::=/2} predicate. The following Prolog code completes the
example:

\label{listing 2}
\begingroup
\inputencoding{latin1}
\begin{lstlisting}[numbers=left]
'S' ::= a, 'S', b.
'S' ::= empty.
:- parse('S', [a, a, b, b], []).
yes.
:- parse('S', [a, a, b], []).
no.
\end{lstlisting}
\endgroup
This is a usage example. Here we define a non-terminal symbol \emph{S},
with 2 production rules stating that a matching string must contain
a series of a symbols followed by \emph{a} series of \emph{b} symbols,
where the number of \emph{a}s and \emph{b}s must be the same. Then
we test the \emph{parse/3} predicate with 2 strings - one conforming
and one not.

On the Prolog level, this was a definition of \emph{::=/2}; but actually
this was a definition of \emph{S}. This definition did not wear the
traditional logic-programming shape of a Horn Clause. In logic-programming
terms this definition of \emph{::=/2} consists of a set of {}``facts''.
An alternative way to look at this definition is to say that we've
stepped out of logic programming and into another domain - context
free grammars, in this particular case.

In a similar way we can show that Prolog code can be used in other
domains as well - functional programming, imperative programming and
more. All these extensions use the same technique of defining a predicate
by its usage as a part of the {}``DSL'' definition, and then having
the user of the DSL define that predicate in the traditional sense.

The above example may raise a few questions: We used capital letters
for non-termial symbols and lowercase letters for characters, but
this was no more than a convension. Is there a way we can differentiate
between them? How can we make sure that grammars defined by the user
are correct (i.e. have a single non-terminal symbol on the left-hand-side,
and a legal term on the right hand side)?

One way of solving this is by using static typing. With static typing
we can define the type signature of \emph{::=/2} as a part of the
DSL definition, to allow only correct production rules to be defined.
The field of type-systems for logic-programming languages has been
widely explored, but most existing type-systems assume {}``traditional''
use, meaning they assume that predicates are defined using a closed
set of consecutive Horn Clauses, and not in the way \emph{::=/2} was
defined in the above example. In this paper we define a type-system
that allows and empowers DSL definition. The type information provided
by this type system will complete the DSL definition with rules of
correctness.

In the following section we shall explore the requirements we have
for this type-system. In the third section we will describe the language
constructs added to facilitate this type-system. In the forth section
we shall describe the algorithm used to type-check the code, and in
the fifth section we shall provide a discussion and comparison to
other type systems.


\section{Requirements}


\subsection{Implicit}

We require that the type-system will be as seemless as possible. This
is especially important for defined DSLs. For example, in the above
DSL (context-free grammers) we allow the language definition (the
first listing) to be altered to contain type definitions, but we would
like to keep the user code (the second listing) virtually unchanged.
In that example, the definition of \emph{S} as a non-terminal symbol
should be implicit, and any use of that symbol thereafter should be
associated to that definition. This implies that we need \noun{Hindley-Milner}
type inference, to allow our language to be \emph{implicitly typed}.


\subsection{Polymorphism}

Another requirement is for type signatures to be polymorphic. For
example, in the above example we may want to be able to parse lists
of any kind of element (e.g. characters, tokens of some sort etc).
This requires that the type signature of \emph{parse/3} should be
polymorphic (i.e. depend on a type variable instead of all-concrete
types). This kind of polymorphism is totally supported by \noun{Hindley-Milner}
type inference. However, sometimes we may wish to restrain this polymorphism.
One example would be if we want to keep the \emph{parse/3} predicate
{}``open'', meanning we would like to allow users to extend it to
allow different kinds of patterns to be used. One example for this
could be to allow character ranges (as often used in regular expressions)
when the terminal type is a character. Allowing this requires that
the \emph{Pattern} parameter provided to \emph{parse/3} would not
be of a restricted type, but rather a memeber of a \emph{type-class}.
This type-class would be associated with the \emph{parse/3} predicate
and any new \emph{instance} of that class (a type conforming to it)
would require an implementation of \emph{parse/3} that takes that
instance type as its \emph{Pattern} parameter.

Type-classes provide great strength to the language. They allow terms
to change their meaning based on the context, while maintaining the
ability to infer types. In DSL terms, they can be used to reason about
the semantic correctness of a piece of DSL code.


\subsection{Extensibility}

Here we require that the type-system will allow DSL definition. This
requires that type inference and constraint checking associated with
type-classes will not be based on the assumption that all clauses
contributing to a certain predicate are grouped together in the source
file. We cann't even assume they are in the same source file or module.
In the example above, the \emph{::=/2} predicate can be {}``defined''
in numerous different modules, in different parts of the software,
each defining a different grammar. We would still like type-checking
to be able to work correctly.


\section{Language Extensions to support the Type-System}

In this section we will introduce the language constructs needed for
our type-system. We'll start with a definition of the \noun{Hindley-Milner}
system, and then move on to define type-classes.


\subsection{The \noun{Hindley-Milner} Type-Inference}


\subsubsection{Units}

Because of the extensibility requirement we do not want to rely on
the fact that clauses of a certain predicate are kept together to
infer their types. It is for that same reason that we don't want to
limit type inference to predicates. For this reason we define a new
concept - a \emph{unit}. A unit is a user-defined section of the code
- a set of clauses, forming the scope in which one or more concepts%
\footnote{We will use the term \emph{concept} here to refer to a \emph{name/arity}
pair. This can apply to both predicates and functions.%
} assume their type signature by type-inference. In other words, type
inference {}``happens'' inside units. Each concept that is defined
in a unit has an {}``open'' type signature inside this unit (meaning
the type signature can be determined inside that unit), a {}``closed''
signature after that unit (meaning that other clauses using that concept
do not change its signature), and no signature before that unit (meanning
that using that concept above the unit where it's defined will emit
an error).

A unit definition looks like the following:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}
unit [<list of name/arity pairs>].
% Clauses of this unit...
end.
\end{lstlisting}
\endgroup
For example:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}[numbers=left]
unit [p/2].
p(1, _).
p(_, X) :- p(X, _).
end.
\end{lstlisting}
\endgroup
This example defines a simple predicate which succeeds if given the
value 1 as one of its arguments. Line 2 asserts that the first argument
must be a number (or an integer, depending on how we decide to type
numbers). Line 3 asserts that the first and second argument share
type (and hence the second argument is also a number). The type signature
provided by this definition is the combination of what we infer from
both clauses. In this example we define a predicate, but units can
be used to define any kind of concept.


\subsubsection{Explicit Type Signature}

An alternative way to provide a type signature is by specifying it
explicitly. This is done using the \emph{::/2} operator, in the following
way:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}
<name>(<type1>, ..., <typen>) :: <type>.
\end{lstlisting}
\endgroup
For example, here is a definition of a list:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}
[] :: list(_).
[T | list(T)] :: list(T).
\end{lstlisting}
\endgroup
This is a definition of the polymorphic type \emph{list(T)}, which
has 2 concepts that conform to it: \emph{{[}]/0} and \emph{(.)/2}.
Since this is an explicit definition of the type signature of both
concepts, this code should not be contained in a unit defining these
concepts. However, this is also the definition of the concept \emph{list/1}
as a type, so this code can be written like this to implicitly provide
a signature for \emph{list/1}:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}
unit [list/1].
[] :: list(_).
[T | list(T)] :: list(T).
end.
\end{lstlisting}
\endgroup
As can be seen in the above example, types are first-order elements
in this type-system. They all have the type \emph{type}. In this example
\emph{list/1} receives the signature:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}
list(type) :: type
\end{lstlisting}
\endgroup


Predicates are concepts with type \emph{pred}. This allows for meta-predicates
to take predicates as parameters. For example, the predicate \emph{p/2}
from the above example will have the following signature:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}
p(number, number) :: pred
\end{lstlisting}
\endgroup



\subsubsection{Implementing the Context-Free-Grammar example with Type Inference}

The example from section 1 should look like this:


\begingroup
\inputencoding{latin1}
\begin{lstlisting}[numbers=left]
% The DSL Definition:
:- op(700, xfx, '::=').
unit [pattern/1].
parse(pattern(C), list(C), list(C)) :: pred
end.

unit [empty/0, cat/2, terminal/1, '::='/2].
parse(empty, Text, Text).
parse(terminal(First), [First | Rest], Rest).
parse(cat(A, B), Text, Residue) :-
    parse(A, Text, AfterA),
    parse(B, AfterA, Residue).
parse(NonTerminal, Text, Residue) :-
    NonTerminal ::= Pattern,
    pasrse(Pattern, Text, Residue).
end.

% DSL usage
unit ['S'/0].
'S' ::= cat(cat(terminal(1), 'S'), terminal(2)).
'S' ::= empty.
end.
:- parse('S', [1, 1, 2, 2], []).
yes.
:- parse('S', [1, 1, 2], []).
no.
\end{lstlisting}
\endgroup
This example consists of 3 units - 2 in the DSL definition and 1 in
the usage. The first unit defines a polymorphic type - \emph{pattern/1},
which is the type of all allowed patterns. Its type parameter determines
the type of tokens it is supposed to match in the input string. The
signature of \emph{parse/3} is given explicitly on line 4. This signature
provides the connection between the types of the arguments.

The second unit defines the clauses of \emph{pred/3}, thus infering
the types of the constructs forming a valid pattern. This unit also
infers the signature of \emph{::=/2}, which is to be defined by the
user. The content of the unit is the same as the definition of \emph{parse/3}
in section 1, except for use of \emph{cat/2} instead of \emph{(,)/2}
and the use of \emph{terminal/1}. These are needed here because in
our type-system, like many other \noun{Hindley-Milner }type systems,
a concept can only have one signature (no overloading). This means
that if \emph{(,)/2} already has a signature, we cannot {}``overload''
it. Similarly, on line 9, if we omit the \emph{terminal} wrapper,
we will get a type-mismatch, since \emph{First} has type \emph{pattern(C)}
on the first argument, but type \emph{C} on the second argument. Adding
these constructs makes the DSL less expressive, but we will fix that
later in this section.

The third unit is in the {}``user'' code. Here the new concept we
define is \emph{S/0}. It gets its type from its usage as the first
argument of \emph{::=/2}. \emph{S/0} is given the type \emph{pattern(number)},
by infering the type of the right-hand-side of the definition on line
20. We used numbers instead of atoms in this example to avoid the
{}``atom vs. concept'' problem. This is a caveat in the Prolog language,
and our way of dealing with it is out of the scope of this paper.
\end{document}
